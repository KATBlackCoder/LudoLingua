---
globs: *.vue,*.ts
alwaysApply: false
---
# Nuxt UI v4 Usage Policy

This project uses Nuxt UI v4 for all UI components and elements. Follow these guidelines for consistent, performant, and accessible user interfaces built on Reka UI primitives and Tailwind CSS v4.

## Core Principles

### Component Usage
- **Always use Nuxt UI v4 components** instead of raw HTML elements
- **Leverage Reka UI's 55+ primitives** for enhanced accessibility and performance
- **Use composition over inheritance** - combine smaller components for complex UIs
- **Built-in accessibility** following WAI-ARIA authoring practices

### Performance Guidelines
- **Optimize for large datasets** (2000+ translation units) with virtualization
- **Use table virtualization** for columns and rows in large data tables
- **Implement proper loading states** and skeleton screens
- **Minimize component re-renders** with computed properties and reactive patterns
- **Leverage Tailwind CSS v4's faster builds** (5x faster full builds, 100x faster incremental)

## Component Categories

### Layout Components
- **UApp**: Global application wrapper with configuration
- **UContainer**: Content width constraint and responsive margins
- **UHeader**: Responsive header with navigation
- **UFooter**: Responsive footer sections
- **UMain**: Fill available viewport height
- **UPage**: Page layout with optional left/right slots
- **UPageHeader**: Structured page headers
- **UPageBody**: Main page content area
- **UPageSection**: Content sections with consistent spacing

### Data Display & Management
- **UTable**: High-performance tables with sorting, filtering, virtualization
- **UAccordion**: Collapsible content sections
- **UCard**: Content containers with header/body/footer slots
- **UTimeline**: Event timelines with icons and descriptions
- **UCarousel**: Image/content carousels
- **UTree**: Hierarchical data display
- **UBadge**: Status indicators and labels
- **UProgress**: Progress indicators for operations
- **UUser**: User profile display components

### Forms & Input
- **UForm**: Form wrapper with validation schema support (Standard Schema)
- **UInput**: Text input with enhanced validation
- **UInputNumber**: Numeric input with controls
- **UInputTags**: Tag input for multiple values
- **USelect**: Dropdown selections with search
- **UTextarea**: Multi-line text input
- **UCheckbox**: Boolean selections
- **URadio**: Single-choice selections
- **UColorPicker**: Color selection with throttling
- **UFileUpload**: File upload with drag-and-drop

### Navigation
- **UButton**: Action buttons with variants and states
- **UButtonGroup**: Grouped related actions (UFieldGroup)
- **UTabs**: Tabbed content organization
- **UBreadcrumb**: Navigation hierarchy
- **UPagination**: Dataset navigation with page controls
- **UStepper**: Multi-step process indicators
- **UHorizontalNavigation**: Horizontal navigation menus

### Feedback & Overlays
- **UToast**: Success/error notifications
- **UAlert**: Important information displays
- **UModal**: Modal dialogs with overlay management
- **USlideover**: Side panel overlays
- **ULoading**: Loading state indicators
- **USkeleton**: Content placeholders while loading
- **UChip**: Small indicator badges

### Content & Marketing
- **UPageHero**: Landing page hero sections
- **UPageFeature**: Feature showcases
- **UPageGrid**: Responsive content grids
- **UPageCTA**: Call-to-action sections
- **UBlogPost**: Blog content display
- **UPricingPlan**: Pricing plan components
- **UPricingTable**: Pricing comparison tables

## Icon Usage

### Lucide Icons Integration
- **Use `i-lucide-*` format** for all icons (updated from Heroicons)
- **Prefer semantic icon names** over generic ones
- **Maintain consistent icon sizing** within components
- **Use appropriate icon variants** based on context

### Common Icons
```vue
<!-- Navigation -->
<i-lucide-arrow-left />
<i-lucide-home />
<i-lucide-settings />

<!-- Actions -->
<i-lucide-play />
<i-lucide-pause />
<i-lucide-square />
<i-lucide-refresh-cw />

<!-- Status -->
<i-lucide-check-circle />
<i-lucide-alert-triangle />
<i-lucide-x-circle />

<!-- File Operations -->
<i-lucide-folder-open />
<i-lucide-file-text />
<i-lucide-download />

<!-- UI Elements -->
<i-lucide-chevron-down />
<i-lucide-ellipsis-vertical />
<i-lucide-search />
```

## Theming & Styling

### Color System
- **Use semantic color classes** (primary, secondary, success, warning, error, neutral)
- **Leverage Nuxt UI's color palette** for consistency
- **Support dark mode** with automatic theme switching
- **Use color variants** appropriately (solid, soft, outline, subtle, ghost)

### Dark Mode Support
```vue
<template>
  <UButton 
    :icon="isDark ? 'i-lucide-sun' : 'i-lucide-moon'"
    @click="toggleColorMode"
  />
</template>
```

### Responsive Design
- **Use responsive utilities** for mobile-first design
- **Test on multiple screen sizes** during development
- **Implement proper touch targets** for mobile devices
- **Use responsive grid layouts** for flexible content

## Form Patterns

### Standard Schema Integration
```vue
<script setup lang="ts">
import * as z from 'zod'
import type { FormSubmitEvent } from '@nuxt/ui'

const schema = z.object({
  email: z.string().email('Invalid email'),
  password: z.string().min(8, 'Must be at least 8 characters')
})

type Schema = z.output<typeof schema>

function onSubmit(payload: FormSubmitEvent<Schema>) {
  console.log('Form submitted:', payload)
}
</script>

<template>
  <UForm :schema="schema" @submit="onSubmit">
    <UInput 
      v-model="email"
      name="email"
      label="Email"
      placeholder="Enter your email"
      required
    />
    <UInput 
      v-model="password"
      name="password"
      type="password"
      label="Password"
      placeholder="Enter your password"
      required
    />
    <UButton type="submit">Submit</UButton>
  </UForm>
</template>
```

### Loading States
```vue
<template>
  <UButton 
    :loading="isLoading"
    :disabled="isLoading"
    @click="handleAction"
  >
    {{ isLoading ? 'Processing...' : 'Submit' }}
  </UButton>
</template>
```

## Table Best Practices

### High-Performance Tables
```vue
<script setup lang="ts">
const table = useTemplateRef('table')

const columns = [{
  accessorKey: 'name',
  header: 'Name',
  cell: ({ row }) => h('div', row.getValue('name'))
}, {
  accessorKey: 'status',
  header: 'Status',
  cell: ({ row }) => h(UBadge, { 
    color: getStatusColor(row.getValue('status'))
  }, row.getValue('status'))
}]
</script>

<template>
  <UTable
    ref="table"
    :data="translationUnits"
    :columns="columns"
    :loading="isLoading"
    sticky
    class="h-96"
  >
    <template #expanded="{ row }">
      <pre>{{ row.original }}</pre>
    </template>
  </UTable>
</template>
```

### Performance Optimizations
- **Use virtualization** for large datasets (1000+ rows)
- **Implement proper pagination** to limit rendered items
- **Debounce search inputs** to prevent excessive filtering
- **Use computed properties** for derived data
- **Leverage `useTemplateRef`** for direct table API access

## Overlay Management

### Modern Overlay Pattern
```vue
<script setup lang="ts">
import { useOverlay } from '#imports'
import { ModalExample } from '#components'

const overlay = useOverlay()
const modal = overlay.create(ModalExample, { title: 'Default Title' })

function openModal() {
  // Override props when opening
  modal.open({ title: 'Custom Title' })
}

async function openModalWithResult() {
  const result = await modal.open()
  console.log('Modal result:', result)
}
</script>
```

## Error Handling

### Toast Notifications
```vue
<script setup>
const { $toast } = useNuxtApp()

const handleError = (error) => {
  $toast.add({
    title: 'Error',
    description: error.message,
    color: 'red',
    icon: 'i-lucide-alert-triangle'
  })
}

const handleSuccess = () => {
  $toast.add({
    title: 'Success',
    description: 'Operation completed successfully',
    color: 'green',
    icon: 'i-lucide-check-circle'
  })
}
</script>
```

### Loading States
```vue
<template>
  <UCard>
    <template #header>
      <div class="flex items-center gap-2">
        <h3>Project Statistics</h3>
        <ULoading v-if="isLoading" size="sm" />
      </div>
    </template>
    
    <USkeleton v-if="isLoading" class="h-32" />
    <div v-else>
      <!-- Content -->
    </div>
  </UCard>
</template>
```

## Accessibility Guidelines

### ARIA Labels & Screen Reader Support
```vue
<template>
  <UButton 
    aria-label="Load new RPG Maker project"
    @click="loadProject"
  >
    <i-lucide-folder-open class="w-4 h-4" />
    Load Project
  </UButton>
</template>
```

### Keyboard Navigation
- **Ensure all interactive elements** are keyboard accessible
- **Use proper heading hierarchy** (h1, h2, h3, etc.)
- **Provide meaningful labels** for form inputs
- **Test with screen readers** during development

## Component Composition

### Reusable Patterns
```vue
<!-- ProjectCard.vue -->
<template>
  <UCard>
    <template #header>
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold">{{ title }}</h3>
        <UBadge :color="statusColor">{{ status }}</UBadge>
      </div>
    </template>
    
    <div class="space-y-4">
      <slot />
    </div>
    
    <template #footer>
      <div class="flex justify-end gap-2">
        <slot name="actions" />
      </div>
    </template>
  </UCard>
</template>
```

## Performance Tips

### Lazy Loading & Code Splitting
- **Use dynamic imports** for heavy components
- **Implement code splitting** for better initial load times
- **Use `v-show` vs `v-if`** appropriately
- **Optimize reactive dependencies** in computed properties

### Memory Management
- **Clean up event listeners** in `onUnmounted`
- **Use `shallowRef`** for large objects that don't need deep reactivity
- **Implement proper cleanup** for long-running operations

## Migration from Nuxt UI v3

### Key Changes
- **Icons**: Migrated from Heroicons to Lucide (`i-heroicons-*` → `i-lucide-*`)
- **Foundation**: Now built on Reka UI instead of Headless UI
- **Performance**: 5x faster builds with Tailwind CSS v4
- **Overlay Management**: New `useOverlay` composable for modals/slideovers
- **Table API**: Enhanced with `useTemplateRef` for direct access

### Migration Steps
1. **Update icon references** from Heroicons to Lucide format
2. **Refactor overlay usage** to use `useOverlay` composable
3. **Update table implementations** to leverage new virtualization features
4. **Test component accessibility** with updated Reka UI primitives
5. **Optimize performance** with new Tailwind CSS v4 features

## Testing Considerations

### Component Testing
- **Test component variants** and states
- **Verify accessibility** with screen readers
- **Test responsive behavior** across screen sizes
- **Validate form interactions** and error states

### Integration Testing
- **Test component composition** and data flow
- **Verify loading states** and error handling
- **Test user interactions** and state changes
- **Validate performance** with large datasets (2000+ items)
